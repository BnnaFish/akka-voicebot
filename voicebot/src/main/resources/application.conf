akka.persistence {
  journal.plugin = "postgres-journal"
  snapshot-store.plugin = "postgres-snapshot-store"
}

akka = {
  actor {
    serialize-messages = off // verify that messages are serializable

    debug {
      receive = on // log all messages sent to an actor if that actors receive method is a LoggingReceive
      autoreceive = on // log all special messages like Kill, PoisoffPill etc sent to all actors
      lifecycle = on // log all actor lifecycle events of all actors
      fsm = off // enable logging of all events, transitioffs and timers of FSM Actors that extend LoggingFSM
      event-stream = on // enable logging of subscriptions (subscribe/unsubscribe) on the ActorSystem.eventStream
    }

    serializers {
      jackson-json = "akka.serialization.jackson.JacksonJsonSerializer"
    }

    serialization-bindings {
      "Domain.JsonSerializable" = jackson-json
    }
  }
}

postgres-journal.dao = "akka.persistence.postgres.journal.dao.FlatJournalDao"

akka-persistence-postgres {
  logicalDeletion.enable = false

  database-provider-fqcn = "akka.persistence.postgres.db.DefaultSlickDatabaseProvider"
}

slick = {
  profile = "akka.persistence.postgres.db.ExtendedPostgresProfile$"
  db {
    connectionPool = "HikariCP"
    url = "jdbc:postgresql://localhost:5432/voicebot"
    user = "docker"
    password = "docker"
    driver = "org.postgresql.Driver"
    queueSize = 10000 // number of objects that can be queued by the async executor
    connectionTimeout = 180000
    validationTimeout = 5000
    idleTimeout = 600000
    maxLifetime = 1800000
    leakDetectionThreshold = 0
    keepAliveConnection = on
    numThreads = 1
    maxConnections = 1 // 2 * numThreads + 1
    minConnections = 1
  }
}

# the akka-persistence-journal in use
postgres-journal {
  class = "akka.persistence.postgres.journal.PostgresAsyncWriteJournal"

  tables {
    journal {
      # Used by akka.persistence.postgres.journal.dao.PartitionsJournalDao
      # and akka.persistence.postgres.journal.dao.PartitionedJournalDao
      partitions {
        # The size of a single partition
        size: 10000000
        # Partition name prefix
        prefix: "j"
      }
      tableName = "journal"
      schemaName = ""
      columnNames {
        ordering = "ordering"
        deleted = "deleted"
        persistenceId = "persistence_id"
        sequenceNumber = "sequence_number"
        created = "created"
        tags = "tags"
        message = "message"
        metadata = "metadata"
      }
    }

    tags {
      tableName = "tags"
      schameName = ""
      columnNames {
        id = "id"
        name = "name"
      }
    }
  }

  dao = "akka.persistence.postgres.journal.dao.FlatJournalDao"

  # Configuration for akka.persistence.postgres.tag.TagIdResolver
  tags {
    # The timeout after unused tag is removed from the TagIdResolver's cache
    cacheTtl = 1 hour
    # Used in case of multiple sessions trying to add the same tag-label-to-id mapping at the same time.
    insertionRetryAttempts = 1
  }

  # The size of the buffer used when queueing up events for batch writing. This number must be bigger then the number
  # of events that may be written concurrently. In other words this number must be bigger than the number of persistent
  # actors that are actively persisting at the same time.
  bufferSize = 1000
  # The maximum size of the batches in which journal rows will be inserted
  batchSize = 400
  # The maximum size of the batches in which journal rows will be read when recovering
  replayBatchSize = 400
  # The maximum number of batch-inserts that may be running concurrently
  parallelism = 8

  # This setting can be used to configure usage of a shared database.
  # To disable usage of a shared database, set to null or an empty string.
  # When set to a non empty string, this setting does two things:
  # - The actor which manages the write-journal will not automatically close the db when the actor stops (since it is shared)
  # - If akka-persistence-postgres.database-provider-fqcn is set to akka.persistence.postgres.db.DefaultSlickDatabaseProvider
  #   then the shared database with the given name will be used. (shared databases are configured as part of akka-persistence-postgres.shared-databases)
  #   Please note that the database will only be shared with the other journals if the use-shared-db is also set
  #   to the same value for these other journals.
  use-shared-db = null

  slick = ${slick}
}

postgres-snapshot-store {
  # class = "akka.persistence.postgres.slick"

  tables {
    snapshot {
      tableName = "snapshot"
      schemaName = ""
      columnNames {
        persistenceId = "persistence_id"
        sequenceNumber = "sequence_number"
        created = "created"
        snapshot = "snapshot"
        metadata = "metadata"
      }
    }
  }

  # This setting can be used to configure usage of a shared database.
  # To disable usage of a shared database, set to null or an empty string.
  # When set to a non empty string, this setting does two things:
  # - The actor which manages the snapshot-journal will not automatically close the db when the actor stops (since it is shared)
  # - If akka-persistence-postgres.database-provider-fqcn is set to akka.persistence.postgres.db.DefaultSlickDatabaseProvider
  #   then the shared database with the given name will be used. (shared databases are configured as part of akka-persistence-postgres.shared-databases)
  #   Please note that the database will only be shared with the other journals if the use-shared-db is also set
  #   to the same value for these other journals.
  use-shared-db = null

  dao = "akka.persistence.postgres.snapshot.dao.ByteArraySnapshotDao"

  slick = ${slick}
}

postgres-read-journal {
  # class = "akka.persistence.postgres.query.PostgresReadJournalProvider"

  # Absolute path to the write journal plugin configuration section.
  # Read journal uses event adapters from the write plugin
  # to adapt events.
  write-plugin = "postgres-journal"

  # New events are retrieved (polled) with this interval.
  refresh-interval = "1s"

  # How many events to fetch in one query (replay) and keep buffered until they
  # are delivered downstreams.
  max-buffer-size = "500"

  # If enabled, automatically close the database connection when the actor system is terminated
  add-shutdown-hook = true

  # This setting can be used to configure usage of a shared database.
  # To disable usage of a shared database, set to null or an empty string.
  # This setting only has effect if akka-persistence-postgres.database-provider-fqcn is set to
  # akka.persistence.postgres.db.DefaultSlickDatabaseProvider. When this setting is set to a non empty string
  # then the shared database with the given name will be used. (shared databases are configured as part of akka-persistence-postgres.shared-databases)
  # Please note that the database will only be shared with the other journals if the use-shared-db is also set
  # to the same value for these other journals.
  use-shared-db = null

  dao = "akka.persistence.postgres.query.dao.ByteArrayReadJournalDao"

  # Configuration for akka.persistence.postgres.tag.TagIdResolver
  tags {
    # The timeout after unused tag is removed from the TagIdResolver's cache
    cacheTtl = 1 hour
  }

  # if true, queries will include logically deleted events
  # should not be configured directly, but through property akka-persistence-postgres.logicalDelete.enable
  # in order to keep consistent behavior over write/read sides
  includeLogicallyDeleted = ${akka-persistence-postgres.logicalDeletion.enable}

  # Settings for determining if ids (ordering column) in the journal are out of sequence.
  journal-sequence-retrieval {
    # The maximum number of ids that will be retrieved in each batch
    batch-size = 10000
    # In case a number in the sequence is missing, this is the amount of retries that will be done to see
    # if the number is still found. Note that the time after which a number in the sequence is assumed missing is
    # equal to maxTries * queryDelay
    # (maxTries may not be zero)
    max-tries = 10
    # How often the actor will query for new data
    query-delay = 1 second
    # The maximum backoff time before trying to query again in case of database failures
    max-backoff-query-delay = 1 minute
    # The ask timeout to use when querying the journal sequence actor, the actor should normally repond very quickly,
    # since it always replies with its current internal state
    ask-timeout = 1 second
  }

  tables {
    journal {
      tableName = "journal"
      schemaName = ""
      columnNames {
        ordering = "ordering"
        persistenceId = "persistence_id"
        sequenceNumber = "sequence_number"
        created = "created"
        tags = "tags"
        message = "message"
      }
    }

    tags {
      tableName = "tags"
      schameName = ""
      columnNames {
        id = "id"
        name = "name"
      }
    }
  }

  slick = ${slick}
}
